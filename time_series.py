# -*- coding: utf-8 -*-
"""time series

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BJ-iQBHBZlF5uCogl3CTEL2brBn4u2CN
"""

#TIME SERIES 1
import datetime
res=datetime.datetime.now()
print("today-now function:",res)

today=datetime.datetime.today()
print("\ntoday:",today)

tomorrow=today+datetime.timedelta(days=1)
print("\ntomorrow:",tomorrow)

yesterday=today-datetime.timedelta(days=1)
print("\nyesterday",yesterday)

res=datetime.datetime.now()
res1=datetime.datetime(2020,6,8,23,10,25,404040)
print("\ndate format[2020,6,8,23,10,25,404040]:",res1)

from datetime import date
d=date(2002,12,31)
print("\nreplacing date:",d,d.replace(day=26))

t=date(2022,10,13)
d=date(2022,10,13).ctime()
print('\nDay and Month:',t,d)

#date object of the today's date
today=date.today()
print("\n today:",today)
print('current year',today.year)
print("current month",today.month)
print("current day",today.day)

#Time series 3
import pandas as pd
import numpy as np
from datetime import datetime
#create data variables
dates=[datetime(2011,1,2),
       datetime(2011,1,5),
       datetime(2011,1,7),
       datetime(2011,1,8),
       datetime(2011,1,10),
       datetime(2011,1,12)]

ts=pd.Series(np.random.randn(6),index=dates)
print("date index\n",ts)

print("date index alone from series :\n",ts.index)
stamp=ts.index[2]
print("second index",stamp)
lts=pd.Series(np.random.randn(1000),
              index=pd.date_range("2001-01-01",periods=1000))
print("\n 1000 days",lts)
print("\n -2001 year",lts['2001'])
print("\n date range -05 month 2001 year \n",lts["2001-05"])
print("\n date range -few dates in 2000 year:\n",lts["2001"].head())
print("\n date range -first 15 dates in 2 months -2001 year:\n",lts["2002-02"].head(15))
print("\n date range rom 26-9-2001:\n",lts[datetime(2000,9,26):])
print("\n date range from 26-9-2001 to 25-9-2002",lts[datetime(2001,9,26):datetime(2000,9,25)])

import pandas as pd
import numpy as np
from datetime import datetime
ran=pd.date_range("2020-08-15","2020-09-01")
print("Date range:\n",ran)
ran=pd.date_range("2020-07-15", periods=10)
print("\nDate range with periods and default day frequency:\n",ran)
ran=pd.date_range("2020-07-15", periods=10, freq='H')
print("\nDate range with periods and hour frequency:\n",ran)
ran=pd.period_range("2020-10", periods=10, freq="M")
print("\nDate range with periods and month frequency:\n",ran)
ran=pd.timedelta_range(0, periods=8, freq="H")
print("\nZero day with hour frequency periods:\n",ran)

import pandas as pd
import numpy as np
from datetime import datetime
#Let's create a date variable that contains the dates.
dates = [datetime(2020,1,5),
datetime(2020,1,10),
datetime(2020,1,15),
datetime(2020,1,20),
datetime(2020,1,25)]
#With this date object, create a series with datetime index.
ts = pd.Series(np.random.randn(5), index=dates)
print("\nWith this date object, create a series with datetime index:\n",ts)
#Truncate method to see the values between two dates
res=ts.truncate(after="1/15/2020")
print("\nTruncate method to truncate datetime series:\n",res)
#let's create a variable named date with the date_range method.
da=pd.date_range("10/1/2022", periods=10, freq="W-SUN")
print("\nDate range with day periods:\n",da)
#Let's create a data frame that indexes this date variable.
long_df=pd.DataFrame(np.random.randn(10,4), index=da, columns=list("ABCD"))
print("\nMulti-column DateFrame with datetime index:\n",long_df)
#In some cases, the dates can be repeated.
date=pd.DatetimeIndex(["1/1/2020","1/2/2020","1/2/2020","1/2/2020","1/3/2020"])
ts1=pd.Series(np.arange(5),index=date)
print("\nDuplicate datetime index:\n",ts1)
#Let's find out repeated dates with the count method.
group=ts1.groupby(level=0)
print("\nRepeated date counts:\n",group.count())

#TIME SERIES 2
import datetime
cd=datetime.datetime.now()
print(cd)

#two-digit year
res=cd.strftime("%y")
print("\n Two-digit year:",res)

#Four-digit year
res1=cd.strftime("%Y")
print("\n Four-digit year:",res1)

#two-digit month [01,12]
res=cd.strftime("%m")
print("\n Two-digit month[01,12]:",res)

#short version of month
res=cd.strftime("%b")
print("\n short version of month ",res)

#full name of the month
res=cd.strftime("%B")
print("\n Full name of month:",res)

#Days of the year
res=cd.strftime("%j")
print("\n Days of the year:",res)

#shortcut for %m %d %y(eg.4/18/12)
res=cd.strftime("%D")
print("\n Shortcut for %m/%d/%y(eg.4/18/12):",res)

#two digit day[01,31]
res=cd.strftime('%d')
print("\n two digitday[01,31]:",res)

#short version of day
res=cd.strftime("%a")
print("\nshort version of day:",res)

#full name of a day
res=cd.strftime("%A")
print("\n Full name of a day",res)

#hour(24-hour clock)[00,23]
res=cd.strftime("%H")
print("\n Hour(24-hour clock)[00,23]:",res)

#Hour(12 hour clock)[01,12]
res=cd.strftime("%I")
print("\n Hour (12 hour clock)[01,12]:",res)

#two digit minute[00,59]
res=cd.strftime("%M")
print("\n two-digit[00,59]:",res)

#second [00,61](seconds 60 61 account for leap seconds)
res=cd.strftime("%S")
print("\n second[00,61](seconds)",res)

#shortcut for year month days
res=cd.strftime("%F")
print("\n shortcut for y m d",res)

#microsecond as an integer, zero padded
res=cd.strftime("%f")
print("\n Microsecond as an integer",res)

#locale equivalentof AM or PM
res=cd.strftime("%p")
print("\n locale equivalent of am or pm",res)

#locale appropriate formatted date
res=cd.strftime("%p")
print("\n locale equivalent of am or pm ",res)

#locale apprpriate formatted date
res=cd.strftime("%x")
print(res)

#locale apprpriate tijme
res=cd.strftime("%X")
print(res)